import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');
const envPath = path.join(projectRoot, '.env');

// Load .env if present
if (fs.existsSync(envPath)) {
    dotenv.config({ path: envPath });
}

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';

const configDir = path.join(projectRoot, 'public');
const configFile = path.join(configDir, 'config.js');

if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
}

const banner = `// Auto-generated by scripts/generate-config.mjs\n// Do not commit secrets. This file is for local development only.\n`;
const content = `${banner}\n(function(){\n    window.__APP_CONFIG__ = Object.assign({}, window.__APP_CONFIG__ || {}, {\n        GEMINI_API_KEY: ${JSON.stringify(GEMINI_API_KEY)}\n    });\n})();\n`;

fs.writeFileSync(configFile, content, 'utf8');
console.log(`[config] Wrote ${path.relative(projectRoot, configFile)} (GEMINI_API_KEY ${GEMINI_API_KEY ? 'set' : 'empty'})`);


